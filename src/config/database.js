const { ref, get, query } = require("firebase/database");
const { db } = require("./firebaseConfig");

// Fun√ß√£o para normalizar n√∫meros de telefone brasileiros (importada)
function normalizePhoneNumber(phone) {
  if (!phone) return null;
  
  // Remove todos os caracteres n√£o num√©ricos
  let cleanPhone = phone.replace(/\D/g, '');
  
  // Se n√£o come√ßar com 55 (c√≥digo do Brasil), adiciona
  if (!cleanPhone.startsWith('55')) {
    cleanPhone = '55' + cleanPhone;
  }
  
  // Para n√∫meros brasileiros
  if (cleanPhone.startsWith('55')) {
    // Extrai o c√≥digo do pa√≠s (55)
    const countryCode = cleanPhone.substring(0, 2);
    const rest = cleanPhone.substring(2);
    
    if (rest.length >= 10) {
      const areaCode = rest.substring(0, 2);
      let phoneNumber = rest.substring(2);
      
      // CORRE√á√ÉO ESPEC√çFICA: Se tem 11 d√≠gitos (13 total) e come√ßa com 9, remove o primeiro 9
      if (cleanPhone.length === 13 && phoneNumber.startsWith('9')) {
        phoneNumber = phoneNumber.substring(1); // Remove o primeiro 9
        console.log(`üîß Removendo 9 extra: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      // Se tem 10 d√≠gitos e come√ßa com 99, remove o primeiro 9
      else if (phoneNumber.length === 10 && phoneNumber.startsWith('99')) {
        phoneNumber = phoneNumber.substring(1);
        console.log(`üîß Removendo 9 duplicado: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      
      cleanPhone = countryCode + areaCode + phoneNumber;
    }
  }
  
  console.log(`üì± N√∫mero normalizado: ${phone} -> ${cleanPhone}`);
  return cleanPhone;
}

// Verificar se o Firebase foi inicializado corretamente
if (!db) {
  console.error("‚ùå Database n√£o inicializado. Verificando configura√ß√£o do Firebase...");
}

async function getAllChurchMembers(churchId) {
  if (!churchId || !db) {
    return [];
  }

  try {
    const refMembers = query(ref(db, `members/${churchId}`));
    const snapshot = await get(refMembers);

    if (snapshot.exists()) {
      const membersData = snapshot.val();
      const members = Object.values(membersData);
      
      console.log(`üë• Encontrados ${members.length} membros para igreja ${churchId}`);
      return members.map(member => ({
        ...member,
        phone: normalizePhoneNumber(member.phone)
      }));
    }

    return [];
  } catch (error) {
    console.error("‚ùå Erro ao buscar membros da igreja:", error.message);
    return [];
  }
}

// Fun√ß√£o para buscar um usu√°rio pelo n√∫mero de telefone
async function getUserByPhone(phone) {
  if (!phone || !db) {
    return null;
  }

  try {
    const normalizedPhone = normalizePhoneNumber(phone);
    console.log(`üîç Buscando usu√°rio pelo telefone: ${normalizedPhone}`);
    
    // Buscar em todas as igrejas
    const refMembers = ref(db, 'members');
    const snapshot = await get(refMembers);
    
    if (snapshot.exists()) {
      const churchesData = snapshot.val();
      
      for (const [churchId, members] of Object.entries(churchesData)) {
        for (const [memberId, member] of Object.entries(members)) {
          if (normalizePhoneNumber(member.phone) === normalizedPhone) {
            console.log(`‚úÖ Usu√°rio encontrado na igreja ${churchId}`);
            return {
              ...member,
              memberId,
              churchId,
              phone: normalizedPhone
            };
          }
        }
      }
    }
    
    console.log(`‚ùå Usu√°rio n√£o encontrado para o telefone: ${normalizedPhone}`);
    return null;
  } catch (error) {
    console.error("‚ùå Erro ao buscar usu√°rio:", error.message);
    return null;
  }
}

// Fun√ß√£o para buscar todas as igrejas que um usu√°rio faz parte
async function getUserChurches(phone) {
  if (!phone || !db) {
    return [];
  }

  try {
    const normalizedPhone = normalizePhoneNumber(phone);
    console.log(`üîç Buscando igrejas do usu√°rio: ${normalizedPhone}`);
    
    const userChurches = [];
    const refMembers = ref(db, 'members');
    const snapshot = await get(refMembers);
    
    if (snapshot.exists()) {
      const churchesData = snapshot.val();
      
      for (const [churchId, members] of Object.entries(churchesData)) {
        for (const [memberId, member] of Object.entries(members)) {
          if (normalizePhoneNumber(member.phone) === normalizedPhone) {
            console.log(`‚úÖ Usu√°rio encontrado na igreja ${churchId}, membro ID: ${memberId}`);
            // Buscar informa√ß√µes da igreja
            const churchInfo = await getChurchInfo(churchId);
            console.log(`üèõÔ∏è Informa√ß√µes da igreja ${churchId}:`, churchInfo ? 'Encontradas' : 'N√ÉO encontradas');
            userChurches.push({
              churchId,
              churchName: churchInfo?.name || `Igreja ${churchId}`,
              churchInfo,
              memberInfo: {
                ...member,
                memberId,
                phone: normalizedPhone
              }
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ Encontradas ${userChurches.length} igrejas para o usu√°rio`);
    return userChurches;
  } catch (error) {
    console.error("‚ùå Erro ao buscar igrejas do usu√°rio:", error.message);
    return [];
  }
}

// Fun√ß√£o para buscar informa√ß√µes de uma igreja espec√≠fica
async function getChurchInfo(churchId) {
  if (!churchId || !db) {
    console.log(`‚ùå getChurchInfo: churchId ou db inv√°lido - churchId: ${churchId}, db: ${!!db}`);
    return null;
  }

  try {
    console.log(`üîç Buscando informa√ß√µes da igreja: ${churchId}`);
    
    // Lista de caminhos poss√≠veis para buscar a igreja
    const searchPaths = [
      churchId,                    // Diretamente pelo ID
      `churches/${churchId}`,      // Em uma cole√ß√£o churches
      `church/${churchId}`,        // Em uma cole√ß√£o church (singular)
      `igrejas/${churchId}`,       // Em portugu√™s
      `${churchId}/info`,          // Info dentro do ID
      `${churchId}/church`         // Church dentro do ID
    ];
    
    for (const path of searchPaths) {
      console.log(`üîç Tentando caminho: ${path}`);
      const refChurch = ref(db, path);
      const snapshot = await get(refChurch);
      
      if (snapshot.exists()) {
        const churchData = snapshot.val();
        console.log(`‚úÖ Igreja encontrada no caminho: ${path}`);
        console.log(`üìä Nome da igreja: ${churchData.name || 'Nome n√£o dispon√≠vel'}`);
        console.log(`üìä Chaves dispon√≠veis:`, Object.keys(churchData));
        return churchData;
      } else {
        console.log(`‚ùå N√£o encontrado em: ${path}`);
      }
    }
    
    // Se n√£o encontrou, fazer uma busca mais ampla
    console.log(`üîç Fazendo busca ampla no Firebase...`);
    const rootRef = ref(db, '/');
    const rootSnapshot = await get(rootRef);
    
    if (rootSnapshot.exists()) {
      const rootData = rootSnapshot.val();
      console.log(`üîç Chaves dispon√≠veis no n√≠vel raiz:`, Object.keys(rootData));
      
      // Procurar recursivamente pela igreja
      for (const [key, value] of Object.entries(rootData)) {
        if (typeof value === 'object' && value !== null) {
          // Se o valor √© um objeto, verificar se tem informa√ß√µes de igreja
          if (value.name && (key === churchId || key.includes(churchId))) {
            console.log(`üéØ Igreja encontrada em: ${key}`);
            return value;
          }
          
          // Verificar se h√° uma subchave com o churchId
          if (value[churchId]) {
            console.log(`üéØ Igreja encontrada em: ${key}/${churchId}`);
            return value[churchId];
          }
        }
      }
      
      // √öltima tentativa: procurar por qualquer objeto que tenha o nome da igreja
      for (const [key, value] of Object.entries(rootData)) {
        if (typeof value === 'object' && value !== null && value.name && value.id === churchId) {
          console.log(`üéØ Igreja encontrada por ID em: ${key}`);
          return value;
        }
      }
    }
    
    console.log(`‚ùå Igreja ${churchId} n√£o encontrada em nenhum lugar`);
    return null;
  } catch (error) {
    console.error("‚ùå Erro ao buscar informa√ß√µes da igreja:", error.message);
    return null;
  }
}

module.exports = {
  getAllChurchMembers,
  getUserByPhone,
  getUserChurches,
  getChurchInfo,
};
