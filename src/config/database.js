const { ref, get, query } = require("firebase/database");
const { db } = require("./firebaseConfig");

// Fun√ß√£o para normalizar n√∫meros de telefone brasileiros (importada)
function normalizePhoneNumber(phone) {
  if (!phone) return null;
  
  // Remove todos os caracteres n√£o num√©ricos
  let cleanPhone = phone.replace(/\D/g, '');
  
  // Se n√£o come√ßar com 55 (c√≥digo do Brasil), adiciona
  if (!cleanPhone.startsWith('55')) {
    cleanPhone = '55' + cleanPhone;
  }
  
  // Para n√∫meros brasileiros
  if (cleanPhone.startsWith('55')) {
    // Extrai o c√≥digo do pa√≠s (55)
    const countryCode = cleanPhone.substring(0, 2);
    const rest = cleanPhone.substring(2);
    
    if (rest.length >= 10) {
      const areaCode = rest.substring(0, 2);
      let phoneNumber = rest.substring(2);
      
      // CORRE√á√ÉO ESPEC√çFICA: Se tem 11 d√≠gitos (13 total) e come√ßa com 9, remove o primeiro 9
      if (cleanPhone.length === 13 && phoneNumber.startsWith('9')) {
        phoneNumber = phoneNumber.substring(1); // Remove o primeiro 9
        console.log(`üîß Removendo 9 extra: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      // Se tem 10 d√≠gitos e come√ßa com 99, remove o primeiro 9
      else if (phoneNumber.length === 10 && phoneNumber.startsWith('99')) {
        phoneNumber = phoneNumber.substring(1);
        console.log(`üîß Removendo 9 duplicado: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      
      cleanPhone = countryCode + areaCode + phoneNumber;
    }
  }
  
  console.log(`üì± N√∫mero normalizado: ${phone} -> ${cleanPhone}`);
  return cleanPhone;
}

// Verificar se o Firebase foi inicializado corretamente
if (!db) {
  console.error("‚ùå Database n√£o inicializado. Verificando configura√ß√£o do Firebase...");
}

async function getAllChurchMembers(churchId) {
  if (!churchId || !db) {
    return [];
  }

  try {
    const refMembers = query(ref(db, `members/${churchId}`));
    const snapshot = await get(refMembers);

    if (snapshot.exists()) {
      const membersData = snapshot.val();
      const members = Object.values(membersData);
      
      console.log(`üë• Encontrados ${members.length} membros para igreja ${churchId}`);
      return members.map(member => ({
        ...member,
        phone: normalizePhoneNumber(member.phone)
      }));
    }

    return [];
  } catch (error) {
    console.error("‚ùå Erro ao buscar membros da igreja:", error.message);
    return [];
  }
}

module.exports = {
  getAllChurchMembers,
};
