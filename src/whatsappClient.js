const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
const path = require("path");
const fs = require("fs");

// Fun√ß√£o para normalizar n√∫meros de telefone brasileiros
function normalizePhoneNumber(phone) {
  if (!phone) return null;
  
  // Remove todos os caracteres n√£o num√©ricos
  let cleanPhone = phone.replace(/\D/g, '');
  
  // Se n√£o come√ßar com 55 (c√≥digo do Brasil), adiciona
  if (!cleanPhone.startsWith('55')) {
    cleanPhone = '55' + cleanPhone;
  }
  
  // Para n√∫meros brasileiros
  if (cleanPhone.startsWith('55')) {
    // Extrai o c√≥digo do pa√≠s (55)
    const countryCode = cleanPhone.substring(0, 2);
    const rest = cleanPhone.substring(2);
    
    if (rest.length >= 10) {
      const areaCode = rest.substring(0, 2);
      let phoneNumber = rest.substring(2);
      
      // CORRE√á√ÉO ESPEC√çFICA: Se tem 11 d√≠gitos (13 total) e come√ßa com 9, remove o primeiro 9
      if (cleanPhone.length === 13 && phoneNumber.startsWith('9')) {
        phoneNumber = phoneNumber.substring(1); // Remove o primeiro 9
        console.log(`üîß Removendo 9 extra: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      // Se tem 10 d√≠gitos e come√ßa com 99, remove o primeiro 9
      else if (phoneNumber.length === 10 && phoneNumber.startsWith('99')) {
        phoneNumber = phoneNumber.substring(1);
        console.log(`üîß Removendo 9 duplicado: ${cleanPhone} -> ${countryCode + areaCode + phoneNumber}`);
      }
      
      cleanPhone = countryCode + areaCode + phoneNumber;
    }
  }
  
  console.log(`üì± N√∫mero normalizado: ${phone} -> ${cleanPhone}`);
  return cleanPhone;
}

// Criar diret√≥rio se n√£o existir
const sessionPath = path.join(__dirname, '..', '.wwebjs_auth');
if (!fs.existsSync(sessionPath)) {
  fs.mkdirSync(sessionPath, { recursive: true });
}

const client = new Client({
  authStrategy: new LocalAuth({
    clientId: "main-session",
    dataPath: sessionPath
  }),
  puppeteer: {
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
      "--disable-accelerated-2d-canvas",
      "--no-first-run",
      "--no-zygote",
      "--disable-gpu"
    ],
    headless: true,
  },
  webVersionCache: {
    type: 'remote',
    remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2410.1.html',
  }
});

// Eventos de autentica√ß√£o
client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true });
  console.log("QR Code gerado. Escaneie com seu WhatsApp!");
  console.log("Aguardando autentica√ß√£o...");
});

client.on("authenticated", () => {
  console.log("‚úÖ Autentica√ß√£o bem-sucedida! Dados salvos localmente.");
  console.log("üîç Verificando persist√™ncia da sess√£o...");
  
  // Verificar se os arquivos de sess√£o foram realmente criados
  const sessionFile = path.join(sessionPath, 'session-main-session', 'Default');
  if (fs.existsSync(sessionFile)) {
    console.log("‚úÖ Arquivos de sess√£o confirmados no disco");
  } else {
    console.log("‚ö†Ô∏è ATEN√á√ÉO: Arquivos de sess√£o N√ÉO encontrados ap√≥s autentica√ß√£o!");
  }
});

client.on("auth_failure", (msg) => {
  console.error("‚ùå Falha na autentica√ß√£o:", msg);
  console.log("üîÑ Tente escanear o QR Code novamente.");
});

client.on("disconnected", (reason) => {
  console.log("‚ö†Ô∏è WhatsApp desconectado:", reason);
  console.log("üîÑ Tentando reconectar...");
});

client.on("ready", () => {
  console.log("üöÄ Cliente est√° pronto! Bot WhatsApp conectado.");
  console.log("üì± Sess√£o autenticada e persistente ativa.");
  
  // Debug: Verificar informa√ß√µes do cliente
  if (client.info) {
    console.log("‚ÑπÔ∏è Informa√ß√µes do cliente:");
    console.log(`   Nome: ${client.info.pushname}`);
    console.log(`   N√∫mero: ${client.info.wid.user}`);
    console.log(`   Plataforma: ${client.info.platform}`);
    console.log(`   WID: ${client.info.wid._serialized}`);
  } else {
    console.log("‚ö†Ô∏è PROBLEMA: Cliente 'ready' mas client.info est√° undefined!");
  }
  
  // Verificar novamente se a sess√£o est√° persistida
  const sessionFile = path.join(sessionPath, 'session-main-session', 'Default');
  if (fs.existsSync(sessionFile)) {
    console.log("‚úÖ Persist√™ncia confirmada - arquivos de sess√£o existem");
  } else {
    console.log("‚ùå PROBLEMA: Cliente ready mas sem arquivos de sess√£o!");
  }
});

// Debug: Mostrar mensagens recebidas no console
client.on("message", (message) => {
  console.log("üì® MENSAGEM RECEBIDA:");
  console.log(`   De: ${message.from}`);
  console.log(`   Para: ${message.to}`);
  console.log(`   Conte√∫do: ${message.body}`);
  console.log(`   Tipo: ${message.type}`);
  console.log(`   Timestamp: ${new Date(message.timestamp * 1000).toLocaleString()}`);
  console.log(`   √â grupo: ${message.isGroupMsg}`);
  if (message.isGroupMsg) {
    console.log(`   Chat ID: ${message.chatId}`);
  }
  console.log("---");
});

// Debug: Mostrar mensagens enviadas no console
client.on("message_create", (message) => {
  // S√≥ mostrar mensagens enviadas pelo bot (n√£o as recebidas)
  if (message.fromMe) {
    console.log("üì§ MENSAGEM ENVIADA:");
    console.log(`   Para: ${message.to}`);
    console.log(`   Conte√∫do: ${message.body}`);
    console.log(`   Tipo: ${message.type}`);
    console.log(`   Timestamp: ${new Date(message.timestamp * 1000).toLocaleString()}`);
    console.log(`   √â grupo: ${message.isGroupMsg}`);
    if (message.isGroupMsg) {
      console.log(`   Chat ID: ${message.chatId}`);
    }
    console.log("---");
  }
});

// Fun√ß√£o para verificar se existe sess√£o salva
function checkSavedSession() {
  const sessionFile = path.join(sessionPath, 'session-main-session', 'Default');
  const sessionFolderExists = fs.existsSync(path.join(sessionPath, 'session-main-session'));
  
  console.log("üîç Verificando sess√£o salva...");
  console.log(`   Caminho da sess√£o: ${sessionPath}`);
  console.log(`   Pasta session-main-session existe: ${sessionFolderExists}`);
  console.log(`   Arquivo Default existe: ${fs.existsSync(sessionFile)}`);
  
  if (fs.existsSync(sessionFile)) {
    const stats = fs.statSync(sessionFile);
    console.log(`   Tamanho do arquivo: ${stats.size} bytes`);
    console.log(`   √öltima modifica√ß√£o: ${stats.mtime.toLocaleString()}`);
    console.log("üìÇ Sess√£o salva encontrada. Tentando restaurar...");
    return true;
  } else {
    console.log("üÜï Nenhuma sess√£o salva encontrada. Ser√° necess√°rio escanear o QR Code.");
    return false;
  }
}

// Fun√ß√£o para inicializar o cliente com verifica√ß√£o
async function initializeClient() {
  console.log("üîÑ Iniciando WhatsApp Bot...");
  
  const hasSession = checkSavedSession();
  if (hasSession) {
    console.log("üîê Tentando conectar com sess√£o existente...");
  }
  
  try {
    await client.initialize();
  } catch (error) {
    console.error("‚ùå Erro ao inicializar cliente:", error.message);
    console.log("üîÑ Tentando novamente em 10 segundos...");
    setTimeout(() => {
      initializeClient();
    }, 10000);
  }
}

// Fun√ß√£o para obter status da conex√£o
function getConnectionStatus() {
  if (client.info) {
    return 'connected';
  } else {
    return 'disconnected';
  }
}

// Fun√ß√£o para fazer logout
async function logout() {
  try {
    console.log('üìù Iniciando processo de logout...');
    await client.logout();
    console.log('‚úÖ Logout realizado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao fazer logout:', error.message);
    return false;
  }
}

// Fun√ß√£o para limpar sess√£o local
function clearSession() {
  try {
    console.log('üóëÔ∏è Removendo arquivos de sess√£o...');
    
    if (fs.existsSync(sessionPath)) {
      fs.rmSync(sessionPath, { recursive: true, force: true });
      console.log('‚úÖ Sess√£o removida com sucesso');
      return true;
    } else {
      console.log('‚ÑπÔ∏è Nenhuma sess√£o encontrada para remover');
      return true;
    }
  } catch (error) {
    console.error('‚ùå Erro ao remover sess√£o:', error.message);
    return false;
  }
}

module.exports = {
  client,
  initializeClient,
  checkSavedSession,
  getConnectionStatus,
  logout,
  clearSession,
  normalizePhoneNumber
};
